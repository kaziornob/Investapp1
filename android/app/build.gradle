def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    /*defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "auro.auro"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }*/

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "auro.auro"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "app"

    signingConfigs {
        dev {
            def keystorePropertiesFile = rootProject.file("key.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        stage {
            def StagekeystorePropertiesFile = rootProject.file("key.properties")
            def StagekeystoreProperties = new Properties()
            StagekeystoreProperties.load(new FileInputStream(StagekeystorePropertiesFile))

            keyAlias StagekeystoreProperties['keyAlias']
            keyPassword StagekeystoreProperties['keyPassword']
            storeFile file(StagekeystoreProperties['storeFile'])
            storePassword StagekeystoreProperties['storePassword']
        }

        qa {
            def QakeystorePropertiesFile = rootProject.file("key.properties")
            def QakeystoreProperties = new Properties()
            QakeystoreProperties.load(new FileInputStream(QakeystorePropertiesFile))

            keyAlias QakeystoreProperties['keyAlias']
            keyPassword QakeystoreProperties['keyPassword']
            storeFile file(QakeystoreProperties['storeFile'])
            storePassword QakeystoreProperties['storePassword']
        }

        prod {
            def ProdkeystorePropertiesFile = rootProject.file("prodKey.properties")
            def ProdkeystoreProperties = new Properties()
            ProdkeystoreProperties.load(new FileInputStream(ProdkeystorePropertiesFile))


            keyAlias ProdkeystoreProperties['keyAlias']
            keyPassword ProdkeystoreProperties['keyPassword']
            storeFile file(ProdkeystoreProperties['storeFile'])
            storePassword ProdkeystoreProperties['storePassword']
        }
    }

    productFlavors {

        dev {
            dimension "app"
            applicationIdSuffix ".dev"
        }

        stage {
            dimension "app"
            applicationIdSuffix ".stage"
        }

        qa {
            dimension "app"
            applicationIdSuffix ".qa"
        }

        prod {
            dimension "app"
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            productFlavors.dev.signingConfig signingConfigs.dev
            productFlavors.stage.signingConfig signingConfigs.stage
            productFlavors.qa.signingConfig signingConfigs.qa
            productFlavors.prod.signingConfig signingConfigs.prod
        }
    }

    buildTypes {
        debug{
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
